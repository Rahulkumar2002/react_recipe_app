{"version":3,"sources":["components/RecipeTile.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeTile","recipe","match","className","onClick","window","open","src","App","YOUR_APP_ID","YOUR_APP_KEY","useState","query","setquery","recipes","setrecipe","healthLabels","sethealthLabels","url","a","Axios","get","result","data","hits","console","log","onSubmit","e","preventDefault","getRecipes","type","placeholder","value","onChange","target","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAGe,SAASA,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACjC,OAEO,MADHA,EAAM,OAAN,MAA0BC,MAAM,0BAE5B,sBAAKC,UAAU,aAAaC,QAAS,WACjCC,OAAOC,KAAKL,EAAM,OAAN,MADhB,UAGI,qBAAKE,UAAU,kBAAkBI,IAAKN,EAAM,OAAN,QACtC,mBAAGE,UAAU,mBAAb,SAAiCF,EAAM,OAAN,WCsClCO,MA3Cf,YAA6C,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,mBAAS,IAAtC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,cAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAIIC,EAAG,0CAAsCN,EAAtC,mBAAsDH,EAAtD,oBAA6EC,EAA7E,iDAAkIM,GAP/F,4CAU1C,4BAAAG,EAAA,sEACqBC,IAAMC,IAAIH,GAD/B,OACMI,EADN,OAEEP,EAAUO,EAAOC,KAAKC,MACtBC,QAAQC,IAAIJ,EAAOC,MAHrB,4CAV0C,sBAoB1C,OACE,sBAAKpB,UAAU,MAAf,UACE,gEACA,uBAAMA,UAAU,kBAAkBwB,SAPrB,SAACC,GAChBA,EAAEC,iBAjBsC,mCAkBxCC,IAKE,UACE,uBAAO3B,UAAU,aAAa4B,KAAK,OAAOC,YAAY,mBAAmBC,MAAOrB,EAAOsB,SAAU,SAACN,GAAD,OAAOf,EAASe,EAAEO,OAAOF,UAC1H,uBAAO9B,UAAU,cAAc4B,KAAK,SAASE,MAAM,WACnD,yBAAQ9B,UAAU,oBAAlB,UACE,wBAAQC,QAAS,kBAAMa,EAAgB,eAAvC,wBACA,wBAAQb,QAAS,kBAAMa,EAAgB,UAAvC,mBACA,wBAAQb,QAAS,kBAAMa,EAAgB,eAAvC,wBACA,wBAAQb,QAAS,kBAAMa,EAAgB,cAAvC,6BAGJ,qBAAKd,UAAU,eAAf,SACGW,EAAQsB,KAAI,SAAAnC,GACX,OAAO,cAAC,EAAD,CAAYA,OAAQA,aC7BtBoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f2453b88.chunk.js","sourcesContent":["import React from 'react';\r\nimport './RecipeTile.css'\r\n\r\nexport default function RecipeTile({ recipe }) {\r\n    return (\r\n        recipe[\"recipe\"][\"image\"].match(/\\.(jpeg|jpg|png|gif)$/)\r\n        != null && (\r\n            <div className=\"recipeTile\" onClick={() => {\r\n                window.open(recipe[\"recipe\"][\"url\"])\r\n            }}>\r\n                <img className=\"recipeTile__img\" src={recipe[\"recipe\"][\"image\"]} />\r\n                <p className=\"recipeTile__name\">{recipe[\"recipe\"][\"label\"]}</p>\r\n            </div>\r\n        )\r\n    );\r\n}","import Axios from 'axios';\nimport './App.css';\nimport './Key'\nimport { useState } from 'react';\nimport RecipeTile from './components/RecipeTile'\n\nfunction App({ YOUR_APP_ID, YOUR_APP_KEY }) {\n  const [query, setquery] = useState(\"\")\n  const [recipes, setrecipe] = useState([])\n  const [healthLabels, sethealthLabels] = useState(\"vegetarian\")\n\n\n\n  var url = `https://api.edamam.com/search?q=${query}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}&from=0&to=10&calories=591-722&health=${healthLabels}`\n\n\n  async function getRecipes() {\n    var result = await Axios.get(url);\n    setrecipe(result.data.hits)\n    console.log(result.data)\n  }\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    getRecipes();\n  }\n  return (\n    <div className=\"App\">\n      <h1>Food Recipe Plaza üçî</h1>\n      <form className=\"app__searchform\" onSubmit={onSubmit}>\n        <input className=\"app__input\" type=\"text\" placeholder=\"Enter Ingridient\" value={query} onChange={(e) => setquery(e.target.value)} />\n        <input className=\"app__submit\" type=\"submit\" value=\"Search\" />\n        <select className=\"app__healthLabels\">\n          <option onClick={() => sethealthLabels(\"vegetarian\")}>vegetarian</option>\n          <option onClick={() => sethealthLabels(\"paleo\")}>paleo</option>\n          <option onClick={() => sethealthLabels(\"dairy-free\")}>dairy-free</option>\n          <option onClick={() => sethealthLabels(\"low-sugar\")}>low-sugar</option>\n        </select>\n      </form>\n      <div className=\"app__recipes\">\n        {recipes.map(recipe => {\n          return <RecipeTile recipe={recipe} />\n        })}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}